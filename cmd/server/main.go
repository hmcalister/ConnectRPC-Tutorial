package main

import (
	"context"
	"fmt"
	"log"
	"net/http"

	"connectrpc.com/connect"
	"golang.org/x/net/http2"
	"golang.org/x/net/http2/h2c"

	greetv1 "hmcalister/connectrpcTutorial/gen/greet/v1"        // generated by protoc-gen-go
	"hmcalister/connectrpcTutorial/gen/greet/v1/greetv1connect" // generated by protoc-gen-connect-go
)

// Dummy struct to implement the methods defined in `greet/v1/greet.proto`
// Implemented methods must be defined on a pointer receiver to a struct.
// See, in this example, `greetv1connect.GreetServiceHandler` for the interface definition.
//
// In this case we need only implement Greet()
type GreetServer struct{}

// Again, see `greetv1connect.GreetServiceHandler` for the interface definition.
// ctx is typical of any connection, but it might be worth checking out when/if it can be canceled etc...
// req is the GreetRequest defined in `greet/v1/greet.proto` but now as a concrete Go struct, generated by buf.
// Same for the returned type GreetResponse
func (s *GreetServer) Greet(
	ctx context.Context,
	req *connect.Request[greetv1.GreetRequest],
) (*connect.Response[greetv1.GreetResponse], error) {
	// Just a logging message, nothing special here
	log.Println("Request headers: ", req.Header())

	// make a new response to the client who sent the request.
	// Note that `connect.NewResponse` is agnostic to the underlying message we defined;
	// it's just how any response is made!
	//
	// The greetv1.GreetResponse, however. That *is* specific, clearly.
	res := connect.NewResponse(&greetv1.GreetResponse{
		Greeting: fmt.Sprintf("Hello, %s!", req.Msg.Name),
	})

	// I am not sure this part is required... seems to just be setting metadata in the header!
	res.Header().Set("Greet-Version", "v1")
	return res, nil
}

func main() {
	// Make a server (any mux will do... what about Chi?)
	mux := http.NewServeMux()
	// Make a new instance that implements our generated methods
	greeter := &GreetServer{}
	// `greetv1connect.NewGreetServiceHandler` is a very neat method.
	// It creates a new http.Handler (like a subrouter or submux) intended to be attached
	// to the parent mux on a specific subpath, so all the generated methods can be
	// served on a specific api path. What path should we use? Well that's returned, too!
	//
	// In this example, `path` is bound to "/greet.v1.GreetService/" which is a little awkward for a HTTP api
	// but fine in any other context.
	path, handler := greetv1connect.NewGreetServiceHandler(greeter)
	// And now our mux will handle any requests to /greet.v1/GreetService/ by sending them to the greet service instance!
	mux.Handle(path, handler)
	http.ListenAndServe(
		"localhost:8080",
		// Use h2c so we can serve HTTP/2 without TLS.
		h2c.NewHandler(mux, &http2.Server{}),
	)
}
